package g.android.p2p.dao;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import g.android.p2p.model.BillDetailModel;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

public class BillDetailDAO {
	private DBOpenHelper helper;// 创建DBOpenHelper对象
	private SQLiteDatabase db;// 创建SQLiteDatabase对象

	public BillDetailDAO(Context context)// 定义构造函数
	{
		helper = new DBOpenHelper(context);// 初始化DBOpenHelper对象
	}

	/**
	 * 添加密码信息
	 * 
	 * @param tb_pwd
	 */
	public void add(List<BillDetailModel> details) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");// 格式化对象
		db = helper.getWritableDatabase();// 初始化SQLiteDatabase对象
		// 执行添加密码操作
		// db.execSQL("insert into tb_pwd (password) values (?)",
		// new Object[] { tb_pwd.getPassword() });
		for (BillDetailModel detail : details) {
			db.execSQL(
					"Insert into billdetail( BillDetailID,BillID,Periods,ReceivableDay,ReceivedDay,ReceivablePrincipalAndInterest,ReceivableInterest,ReceivedPrincipalAndInterest,IsYuQi,Deleted,Flag,UpdateTime,CreateTime)Values(?,?,?,?,?,?,?,?,?,?,?,?,?)",
					new Object[] { detail.BillDetailID, detail.BillID,
							detail.Periods, detail.ReceivableDay,
							detail.ReceivedDay,
							detail.ReceivablePrincipalAndInterest,
							detail.ReceivableInterest,
							detail.ReceivedPrincipalAndInterest, detail.IsYuQi,
							detail.Deleted, detail.Flag,
							sdf.format(detail.UpdateTime),
							sdf.format(detail.CreateTime) });
		}
	}

	public List<BillDetailModel> getDetails(String whereStr) {
		List<BillDetailModel> details = new ArrayList<BillDetailModel>();// 创建集合对象
		db = helper.getWritableDatabase();
		//db = SQLiteDatabase.openDatabase("/data/data/g.android.p2p.activity/databases/data.dat", null, SQLiteDatabase.NO_LOCALIZED_COLLATORS | SQLiteDatabase.OPEN_READWRITE);// 初始化SQLiteDatabase对象
		BillDetailModel detail = null;

		String sql = "select b.sitename,b.[SiteUserName],b.[TotalMoney],b.ReceivablePeriod,b.ReceivedPeriod,b.Remark,d.* from billdetail d left join billinfo b on d.[BillID]= b.billid where deleted=0";
		if(!whereStr.isEmpty())
			sql = String.format("%1$s and %2$s", sql, whereStr);
		sql += " order by ReceivableDay asc";
		
		// 获取所有收入信息
		Cursor cursor = db.rawQuery(sql, null);
		while (cursor.moveToNext())// 遍历所有的收入信息
		{
			detail = new BillDetailModel();
			detail.BillDetailID = cursor.getString(cursor.getColumnIndex("BillDetailID"));
			detail.Remark = cursor.getString(cursor.getColumnIndex("Remark"));
			detail.SiteName = cursor.getString(cursor.getColumnIndex("SiteName"));
			detail.SiteUserName = cursor.getString(cursor.getColumnIndex("SiteUserName"));
			detail.TotalMoney = cursor.getDouble(cursor.getColumnIndex("TotalMoney"));
			detail.ReceivablePeriod = cursor.getInt(cursor.getColumnIndex("ReceivablePeriod"));
			detail.ReceivedPeriod = cursor.getInt(cursor.getColumnIndex("ReceivedPeriod"));
			detail.BillID = cursor.getString(cursor.getColumnIndex("BillID"));
			//detail.CreateTime = cursor.getString(cursor.getColumnIndex("_id"));
			detail.Deleted = cursor.getInt(cursor.getColumnIndex("Deleted"));
			detail.Flag = cursor.getInt(cursor.getColumnIndex("Flag"));
			detail.IsYuQi = cursor.getInt(cursor.getColumnIndex("IsYuQi"));
			detail.Periods = cursor.getString(cursor.getColumnIndex("Periods"));
			detail.ReceivableDay = cursor.getString(cursor.getColumnIndex("ReceivableDay"));
			detail.ReceivableInterest = cursor.getDouble(cursor.getColumnIndex("ReceivableInterest"));
			detail.ReceivablePrincipalAndInterest = cursor.getDouble(cursor.getColumnIndex("ReceivablePrincipalAndInterest"));
			//detail.UpdateTime = cursor.getString(cursor.getColumnIndex("_id"));
			detail.ReceivedPrincipalAndInterest = cursor.getDouble(cursor.getColumnIndex("ReceivedPrincipalAndInterest"));
			
			details.add(detail);
		}
		return details;
	}

	public void ExecSQL(int flag, String BilldetailID) {
		db = helper.getWritableDatabase();// 初始化SQLiteDatabase对象
		db.execSQL(
				"update billdetail set flag=? where billdetailid=?",
				new Object[] { flag, BilldetailID });
	}
}
