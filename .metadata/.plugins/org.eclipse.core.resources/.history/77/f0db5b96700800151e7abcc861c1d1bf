package g.android.p2p.activity;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

import g.android.p2p.dao.*;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity {
	TextView txtlogin;

	Handler handler; // 声明一个Handler对象
	boolean flag = false; // 标记是否成功的变量

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);

		// CheckNet(); // 检测网络并下载最新数据

		handler = new Handler() {
			@Override
			public void handleMessage(Message msg) {
				if (flag) {
					Toast.makeText(MainActivity.this, "文件下载完成！",
							Toast.LENGTH_SHORT).show(); // 显示消息提示
				} else {
					Toast.makeText(MainActivity.this, "文件下载失败！",
							Toast.LENGTH_SHORT).show(); // 显示消息提示
				}
				super.handleMessage(msg);
			}
		};

		txtlogin = (TextView) findViewById(R.id.textView1);
		try {
			GetMoneyInfo(); // 设置投资汇总信息
		} catch (Exception ex) {

			int a = 0;
			a++;
		}

		Button button1 = (Button) findViewById(R.id.btnAddBill);
		Button button2 = (Button) findViewById(R.id.btnDetailList);
		Button btnDown = (Button) findViewById(R.id.btnDown);
		Button btnResh = (Button) findViewById(R.id.btnResh);

		btnDown.setOnClickListener(new View.OnClickListener() {

			public void onClick(View v) {
				CheckNet(); // 检测网络并下载最新数据
			}
		});

		btnResh.setOnClickListener(new View.OnClickListener() {

			public void onClick(View v) {
				GetMoneyInfo();
			}
		});

		button1.setOnClickListener(new View.OnClickListener() {

			public void onClick(View v) {
				Intent intent = new Intent(MainActivity.this, AddBillInfo.class);
				startActivityForResult(intent, 0);
				// /startActivity(intent); // 启动新的Activity
			}
		});

		button2.setOnClickListener(new View.OnClickListener() {

			public void onClick(View v) {
				try
				{
				Intent intent = new Intent(MainActivity.this,
						BillDetailList.class);
				//startActivityForResult(intent, 0);
				startActivity(intent); // 启动新的Activity
				}catch(Exception ex){
					ex.printStackTrace();
				}
			}
		});
	}

	// 获取投资汇总信息
	private void GetMoneyInfo() {
		try {
			BillInfoDAO billDAO = new BillInfoDAO(this);
			List<Double> list = billDAO.GetMoneyInfo();
			String infos = String.format("待收本息:%1$s\r\n待收本金:%2$s\r\n待收利息:%3$s",
					WayOfRepayment.GetRound(list.get(0)),
					WayOfRepayment.GetRound(list.get(0) - list.get(1)),
					WayOfRepayment.GetRound(list.get(1)));
			txtlogin.setText(infos);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (resultCode == Activity.RESULT_OK) {
			GetMoneyInfo(); // 设置投资汇总信息
		}
	}

	private void CheckNet() {
		try {
			if (!isNetworkConnected()) {
				Toast.makeText(MainActivity.this, "未连接网络，无法下载最新信息！",
						Toast.LENGTH_SHORT).show();
			} else if (getNetworkType() != NETTYPE_WIFI) {
				Toast.makeText(MainActivity.this, "非WIFI网络，无法下载最新信息！",
						Toast.LENGTH_SHORT).show();
			} else {
				download();
				// 下载最新网贷数据
			}
		} catch (Exception ex) {

			ex.printStackTrace();
		}
	}

	/******************* 下载文件 ***********************/
	public void download() {
		// 创建一个新线程，用于从网络上获取文件
		new Thread(new Runnable() {
			public void run() {
				try {
					String sourceUrl = "http://7xirah.com1.z0.glb.clouddn.com/p2p/data.dat";
					URL url = new URL(sourceUrl); // 创建下载地址对应的URL对象
					HttpURLConnection urlConn = (HttpURLConnection) url
							.openConnection(); // 创建一个连接
					InputStream is = urlConn.getInputStream(); // 获取输入流对象
					if (is != null) {
						/*
						 * String expandName = sourceUrl.substring(
						 * sourceUrl.lastIndexOf(".") + 1,
						 * sourceUrl.length()).toLowerCase(); // 获取文件的扩展名 String
						 * fileName = sourceUrl.substring(
						 * sourceUrl.lastIndexOf("/") + 1,
						 * sourceUrl.lastIndexOf(".")); // 获取文件名 File file = new
						 * File("/sdcard/pictures/" + fileName + "." +
						 * expandName); // 在SD卡上创建文件
						 */
						File file = new File(
								"/data/data/g.android.p2p.activity/databases/data.dat");
						FileOutputStream fos = new FileOutputStream(file); // 创建一个文件输出流对象
						byte buf[] = new byte[128];// 创建一个字节数组
						// 读取文件到输出流对象中
						while (true) {
							int numread = is.read(buf);
							if (numread <= 0) {
								break;
							} else {
								fos.write(buf, 0, numread);
							}
						}
					}
					is.close(); // 关闭输入流对象
					urlConn.disconnect(); // 关闭连接
					flag = true;
				} catch (MalformedURLException e) {
					e.printStackTrace(); // 输出异常信息
					flag = false;
				} catch (IOException e) {
					e.printStackTrace(); // 输出异常信息
					flag = false;
				}
				catch(Exception ex)
				{
					ex.printStackTrace(); // 输出异常信息
					flag = false;
				}
				Message m = handler.obtainMessage(); // 获取一个Message
				handler.sendMessage(m); // 发送消息
			}
		}).start(); // 开启线程

	}

	/************************* 检测网络 **********************/
	/**
	 * 检测网络是否可用
	 * 
	 * @return
	 */
	public boolean isNetworkConnected() {
		ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo ni = cm.getActiveNetworkInfo();
		return ni != null && ni.isConnectedOrConnecting();
	}

	/**
	 * 获取当前网络类型
	 * 
	 * @return 0：没有网络 1：WIFI网络 2：WAP网络 3：NET网络
	 */

	public static final int NETTYPE_WIFI = 0x01;
	public static final int NETTYPE_CMWAP = 0x02;
	public static final int NETTYPE_CMNET = 0x03;

	public int getNetworkType() {
		int netType = 0;
		ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
		if (networkInfo == null) {
			return netType;
		}
		int nType = networkInfo.getType();
		if (nType == ConnectivityManager.TYPE_MOBILE) {
			String extraInfo = networkInfo.getExtraInfo();
			if (!extraInfo.isEmpty()) {
				if (extraInfo.toLowerCase().equals("cmnet")) {
					netType = NETTYPE_CMNET;
				} else {
					netType = NETTYPE_CMWAP;
				}
			}
		} else if (nType == ConnectivityManager.TYPE_WIFI) {
			netType = NETTYPE_WIFI;
		}
		return netType;
	}

}
